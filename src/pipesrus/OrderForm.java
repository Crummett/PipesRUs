package pipesrus;

import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 * Java SWING form for ordering pipes from Pipes 'R' Us.
 * @author UP744526, UP728600
 */
public class OrderForm extends javax.swing.JDialog {

    private boolean metricLength = true;
    private boolean metricDiameter = false;

    private int coloursOrdered = 3;
    private int plasticGradeOrdered = 0;
    private double length = 0;
    private double diameter = 0;
    private boolean innerInsulation = false;
    private boolean outerReinforcement = false;
    private boolean chemicalResistance = false;

    private final OrderSystem orderSystem = new OrderSystem();

    /**
     * Creates new form Form
     */
    public OrderForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colourButtons = new javax.swing.ButtonGroup();
        gradeButtons = new javax.swing.ButtonGroup();
        lengthImpMet = new javax.swing.ButtonGroup();
        diameterMetImp = new javax.swing.ButtonGroup();
        colourPanel = new javax.swing.JPanel();
        colour0 = new javax.swing.JRadioButton();
        colour1 = new javax.swing.JRadioButton();
        colour2 = new javax.swing.JRadioButton();
        plasticGradePanel = new javax.swing.JPanel();
        grade4 = new javax.swing.JRadioButton();
        grade5 = new javax.swing.JRadioButton();
        grade1 = new javax.swing.JRadioButton();
        grade2 = new javax.swing.JRadioButton();
        grade3 = new javax.swing.JRadioButton();
        otherPropPanel = new javax.swing.JPanel();
        innInsCheckBox = new javax.swing.JCheckBox();
        outReCheckBox = new javax.swing.JCheckBox();
        chemResCheckBox = new javax.swing.JCheckBox();
        measurementPanel = new javax.swing.JPanel();
        lengthInput = new javax.swing.JTextField();
        lengthTag = new javax.swing.JLabel();
        diameterInput = new javax.swing.JTextField();
        diameterTag = new javax.swing.JLabel();
        lengthUnitTag = new javax.swing.JLabel();
        diameterUnitTag = new javax.swing.JLabel();
        lengthImp = new javax.swing.JRadioButton();
        lengthMet = new javax.swing.JRadioButton();
        diameterImp = new javax.swing.JRadioButton();
        diameterMet = new javax.swing.JRadioButton();
        orderButton = new javax.swing.JButton();
        title = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        basketOutputScrollPane = new javax.swing.JScrollPane();
        basketOutput = new javax.swing.JTextPane();
        orderCostLabel = new javax.swing.JLabel();
        orderCost = new javax.swing.JLabel();
        errorDisplay = new javax.swing.JLabel();
        finishButton = new javax.swing.JButton();
        addressPanel = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        addressField = new javax.swing.JTextField();
        countyField = new javax.swing.JTextField();
        cityField = new javax.swing.JTextField();
        postCodeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pipe Ordering Form");

        colourPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Colours"));
        colourPanel.setToolTipText("Colours");
        colourPanel.setName("coloursPanel"); // NOI18N

        colourButtons.add(colour0);
        colour0.setText("0 Colours (grey)");
        colour0.setToolTipText("");
        colour0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colour0ActionPerformed(evt);
            }
        });

        colourButtons.add(colour1);
        colour1.setText("1 Colour");
        colour1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colour1ActionPerformed(evt);
            }
        });

        colourButtons.add(colour2);
        colour2.setText("2 Colours");
        colour2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colour2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colourPanelLayout = new javax.swing.GroupLayout(colourPanel);
        colourPanel.setLayout(colourPanelLayout);
        colourPanelLayout.setHorizontalGroup(
            colourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colourPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(colourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colourPanelLayout.createSequentialGroup()
                        .addComponent(colour0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(35, 35, 35))
                    .addGroup(colourPanelLayout.createSequentialGroup()
                        .addComponent(colour1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(colourPanelLayout.createSequentialGroup()
                        .addComponent(colour2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        colourPanelLayout.setVerticalGroup(
            colourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colourPanelLayout.createSequentialGroup()
                .addComponent(colour0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colour1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colour2)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        plasticGradePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Plastic Grade"));

        gradeButtons.add(grade4);
        grade4.setText("Grade 4");
        grade4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grade4ActionPerformed(evt);
            }
        });

        gradeButtons.add(grade5);
        grade5.setText("Grade 5");
        grade5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grade5ActionPerformed(evt);
            }
        });

        gradeButtons.add(grade1);
        grade1.setText("Grade 1");
        grade1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grade1ActionPerformed(evt);
            }
        });

        gradeButtons.add(grade2);
        grade2.setText("Grade 2");
        grade2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grade2ActionPerformed(evt);
            }
        });

        gradeButtons.add(grade3);
        grade3.setText("Grade 3");
        grade3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grade3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plasticGradePanelLayout = new javax.swing.GroupLayout(plasticGradePanel);
        plasticGradePanel.setLayout(plasticGradePanelLayout);
        plasticGradePanelLayout.setHorizontalGroup(
            plasticGradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plasticGradePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plasticGradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(grade1)
                    .addComponent(grade2)
                    .addComponent(grade3)
                    .addComponent(grade4)
                    .addComponent(grade5))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        plasticGradePanelLayout.setVerticalGroup(
            plasticGradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plasticGradePanelLayout.createSequentialGroup()
                .addComponent(grade1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grade2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grade3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grade4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grade5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        otherPropPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Other"));

        innInsCheckBox.setText("Inner Insulation");
        innInsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                innInsCheckBoxActionPerformed(evt);
            }
        });

        outReCheckBox.setText("Outer Reinforcement");
        outReCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outReCheckBoxActionPerformed(evt);
            }
        });

        chemResCheckBox.setText("Chemical Resistance");
        chemResCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chemResCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout otherPropPanelLayout = new javax.swing.GroupLayout(otherPropPanel);
        otherPropPanel.setLayout(otherPropPanelLayout);
        otherPropPanelLayout.setHorizontalGroup(
            otherPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(innInsCheckBox)
            .addComponent(outReCheckBox)
            .addComponent(chemResCheckBox)
        );
        otherPropPanelLayout.setVerticalGroup(
            otherPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherPropPanelLayout.createSequentialGroup()
                .addComponent(innInsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outReCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chemResCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        measurementPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Measurements"));

        lengthInput.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        lengthInput.setText("0");

        lengthTag.setText("Length");

        diameterInput.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        diameterInput.setText("0");

        diameterTag.setText("Diameter");

        lengthUnitTag.setText("metres");

        diameterUnitTag.setText("inches");

        lengthImpMet.add(lengthImp);
        lengthImp.setText("Imperial");
        lengthImp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthImpActionPerformed(evt);
            }
        });

        lengthImpMet.add(lengthMet);
        lengthMet.setSelected(true);
        lengthMet.setText("Metric");
        lengthMet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthMetActionPerformed(evt);
            }
        });

        diameterMetImp.add(diameterImp);
        diameterImp.setSelected(true);
        diameterImp.setText("Imperial");
        diameterImp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diameterImpActionPerformed(evt);
            }
        });

        diameterMetImp.add(diameterMet);
        diameterMet.setText("Metric");
        diameterMet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diameterMetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout measurementPanelLayout = new javax.swing.GroupLayout(measurementPanel);
        measurementPanel.setLayout(measurementPanelLayout);
        measurementPanelLayout.setHorizontalGroup(
            measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(measurementPanelLayout.createSequentialGroup()
                .addGroup(measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(measurementPanelLayout.createSequentialGroup()
                        .addGroup(measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(measurementPanelLayout.createSequentialGroup()
                                .addComponent(lengthImp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lengthMet))
                            .addGroup(measurementPanelLayout.createSequentialGroup()
                                .addGroup(measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lengthTag)
                                    .addComponent(lengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lengthUnitTag)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, measurementPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(measurementPanelLayout.createSequentialGroup()
                                .addComponent(diameterImp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(diameterMet))
                            .addComponent(diameterTag)
                            .addGroup(measurementPanelLayout.createSequentialGroup()
                                .addComponent(diameterInput, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(diameterUnitTag, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        measurementPanelLayout.setVerticalGroup(
            measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(measurementPanelLayout.createSequentialGroup()
                .addComponent(lengthTag)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lengthImp)
                    .addComponent(lengthMet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lengthUnitTag))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diameterTag)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diameterImp)
                    .addComponent(diameterMet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(measurementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diameterInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diameterUnitTag)))
        );

        orderButton.setText("Add To Order");
        orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderButtonActionPerformed(evt);
            }
        });

        title.setBackground(new java.awt.Color(0, 153, 0));
        title.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        title.setForeground(new java.awt.Color(0, 51, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pipes 'R' Us");

        javax.swing.GroupLayout titleLayout = new javax.swing.GroupLayout(title);
        title.setLayout(titleLayout);
        titleLayout.setHorizontalGroup(
            titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        titleLayout.setVerticalGroup(
            titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
        );

        basketOutput.setEditable(false);
        basketOutputScrollPane.setViewportView(basketOutput);

        orderCostLabel.setText("Order Cost: £");

        orderCost.setText("0.00");

        errorDisplay.setText(" ");

        finishButton.setText("Finish Order");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        addressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Delivery Address"));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setLabelFor(nameField);
        jLabel2.setText("Name");

        jLabel3.setLabelFor(addressField);
        jLabel3.setText("Address Line 1");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("City");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("County");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Post Code");

        javax.swing.GroupLayout addressPanelLayout = new javax.swing.GroupLayout(addressPanel);
        addressPanel.setLayout(addressPanelLayout);
        addressPanelLayout.setHorizontalGroup(
            addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(countyField)
                    .addComponent(cityField)
                    .addComponent(addressField)
                    .addComponent(nameField)
                    .addComponent(postCodeField, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        addressPanelLayout.setVerticalGroup(
            addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addressPanelLayout.createSequentialGroup()
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(basketOutputScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(errorDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(orderCostLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderCost))
                            .addComponent(finishButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(measurementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(plasticGradePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colourPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(otherPropPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(measurementPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(plasticGradePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colourPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(otherPropPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderButton)
                    .addComponent(errorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(basketOutputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(addressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderCostLabel)
                            .addComponent(orderCost))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(finishButton)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event for the 0 colours button being selected. Sets the ordered colours
     * to 0, disables inner insulation and outer reinforcement.
     *
     * @param evt The user clicking on the 0 colours option.
     */
    private void colour0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colour0ActionPerformed
        coloursOrdered = 0;
        // Disables inner insulation as no pipe with 0 colours can have it
        innInsCheckBox.setEnabled(false);
        innInsCheckBox.setSelected(false);
        innerInsulation = false;
        // Disables outer reinforcement as no pipe with 0 colours can have it
        outReCheckBox.setEnabled(false);
        outReCheckBox.setSelected(false);
        outerReinforcement = false;
    }//GEN-LAST:event_colour0ActionPerformed

    /**
     * Event for the 1 colour button being selected. Sets the ordered colours to
     * 1 disables inner insulation and outer reinforcement.
     *
     * @param evt The user clicking on the 1 colour option.
     */
    private void colour1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colour1ActionPerformed
        coloursOrdered = 1;
        // Disables inner insulation as no pipe with 1 colour can have it
        innInsCheckBox.setEnabled(false);
        innInsCheckBox.setSelected(false);
        innerInsulation = false;
        // Disables outer reinforcement as no pipe with 1 colour can have it
        outReCheckBox.setEnabled(false);
        outReCheckBox.setSelected(false);
        outerReinforcement = false;
    }//GEN-LAST:event_colour1ActionPerformed

    /**
     * Event for the 2 colours button being selected. Sets the ordered colours
     * to 2. If grade 2 is selected then disables outer reinforcement and inner
     * insulation. Otherwise it enables inner insulation and outer
     * reinforcement.
     *
     * @param evt The user clicking on the 2 colours option.
     */
    private void colour2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colour2ActionPerformed
        coloursOrdered = 2;
        if (!grade2.isSelected()) {
            innInsCheckBox.setEnabled(true);
            outReCheckBox.setEnabled(true);
        } else if (grade2.isSelected()) {
            innInsCheckBox.setEnabled(true);
            outReCheckBox.setEnabled(false);
            outerReinforcement = false;
        }
    }//GEN-LAST:event_colour2ActionPerformed

    /**
     * Event for plastic grade 1 being selected. 
     * Sets the plasticGradeOrdered to 1. 
     * Disables colour options except for 0 colours. Disables inner
     * insulation and outer reinforcement.
     * @param evt User selects the plastic grade 1 option.
     */
    private void grade1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grade1ActionPerformed
        plasticGradeOrdered = 1;
        // Clears the selected colours and sets the chosen colours to 0
        colourButtons.clearSelection();
        colour0.setEnabled(true);
        colour0.setSelected(true);
        coloursOrdered = 0;
        colour1.setEnabled(false);
        colour2.setEnabled(false);
        // Disables the inner insulation option
        innInsCheckBox.setEnabled(false);
        innInsCheckBox.setSelected(false);
        innerInsulation = false;
        // Disables the outer reinforcement option
        outReCheckBox.setEnabled(false);
        outReCheckBox.setSelected(false);
        outerReinforcement = false;
    }//GEN-LAST:event_grade1ActionPerformed

    /**
     * Event for plastic grade 2 being selected. Sets the plasticGradeOrdered to
     * 2. Disables 0 colours option. Disables inner insulation and outer
     * reinforcement according to colours chosen.
     *
     * @param evt User selects the plastic grade 2 option.
     */
    private void grade2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grade2ActionPerformed
        plasticGradeOrdered = 2;
        if (colour0.isSelected()) {
            // If 0 colours selected, clears colour choice and disables inner insulation and outer reinforcment
            colourButtons.clearSelection();
            coloursOrdered = 3;
            innInsCheckBox.setEnabled(false);
            innInsCheckBox.setSelected(false);
            innerInsulation = false;
            outReCheckBox.setEnabled(false);
            outReCheckBox.setSelected(false);
            outerReinforcement = false;
        } else if (colour1.isSelected()) {
            // If 1 colour selected disables outer reinforcement and inner insulation
            innInsCheckBox.setEnabled(false);
            innInsCheckBox.setSelected(false);
            innerInsulation = false;
            outReCheckBox.setEnabled(false);
            outReCheckBox.setSelected(false);
            outerReinforcement = false;
        } else {
            // if 2 colours selected enables inner insulation and disables outer reinforcement
            innInsCheckBox.setEnabled(true);
            outReCheckBox.setEnabled(false);
            outReCheckBox.setSelected(false);
            outerReinforcement = false;
        }
        // Enables colour options for 1 + 2, and disables 0
        colour0.setEnabled(false);
        colour1.setEnabled(true);
        colour2.setEnabled(true);
    }//GEN-LAST:event_grade2ActionPerformed

    /**
     * Event for plastic grade 3 being selected. Sets the plasticGradeOrdered to
     * 3. Disables 0 colours option. Disables inner insulation and outer
     * reinforcement according to colours chosen.
     *
     * @param evt User selects the plastic grade 3 option.
     */
    private void grade3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grade3ActionPerformed
        plasticGradeOrdered = 3;
        if (colour0.isSelected()) {
            // Clears and resets the colours ordered if 0 colours chosen
            colourButtons.clearSelection();
            coloursOrdered = 3;
        } else if (colour1.isSelected()) {
            // If 1 colour chosen, disables inner insulation and outer reinforcement
            innInsCheckBox.setEnabled(false);
            innInsCheckBox.setSelected(false);
            innerInsulation = false;
            outReCheckBox.setEnabled(false);
            outReCheckBox.setSelected(false);
            outerReinforcement = false;
        } else {
            // If 2 or none chosen enables inner insulation and outer reinforcement
            innInsCheckBox.setEnabled(true);
            outReCheckBox.setEnabled(true);
        }
        // Disables 0 colours option and enables 1 and 2 colours options
        colour0.setEnabled(false);
        colour1.setEnabled(true);
        colour2.setEnabled(true);
    }//GEN-LAST:event_grade3ActionPerformed

    /**
     * Event for plastic grade 4 being selected. Sets the plasticGradeOrdered to
     * 4. Disables 0 colours option. Disables inner insulation and outer
     * reinforcement according to colours chosen.
     *
     * @param evt User selects the plastic grade 4 option.
     */
    private void grade4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grade4ActionPerformed
        plasticGradeOrdered = 4;
        if (colour0.isSelected()) {
            // Clears and resets the colours ordered if 0 colours chosen
            colourButtons.clearSelection();
            coloursOrdered = 3;
        } else if (colour1.isSelected()) {
            // If 1 colour chosen, disables inner insulation and outer reinforcement
            innInsCheckBox.setEnabled(false);
            innInsCheckBox.setSelected(false);
            innerInsulation = false;
            outReCheckBox.setEnabled(false);
            outReCheckBox.setSelected(false);
            outerReinforcement = false;
        } else {
            // If 2 or none chosen enables inner insulation and outer reinforcement
            innInsCheckBox.setEnabled(true);
            outReCheckBox.setEnabled(true);
        }
        // Disables 0 colours option and enables 1 and 2 colours options
        colour0.setEnabled(false);
        colour1.setEnabled(true);
        colour2.setEnabled(true);
    }//GEN-LAST:event_grade4ActionPerformed

    /**
     * Event for plastic grade 5 being selected. Sets the plasticGradeOrdered to
     * 5. Disables 0 and 1 colours options.
     *
     * @param evt User selects the plastic grade 4 option.
     */
    private void grade5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grade5ActionPerformed
        plasticGradeOrdered = 5;
        // Sets the colours to 2
        colour2.setSelected(true);
        coloursOrdered = 2;
        // Disables the other colour options
        colour0.setEnabled(false);
        colour1.setEnabled(false);
        colour2.setEnabled(true);
        // Enables inner insulation and outer reinforcement
        innInsCheckBox.setEnabled(true);
        outReCheckBox.setEnabled(true);
    }//GEN-LAST:event_grade5ActionPerformed

    /**
     * Event for the inner insulation check box being selected Sets inner
     * insulation true or false accordingly Resets the plastic grade chosen if
     * grade 1 is set.
     *
     * @param evt The user selects the inner insulation check box
     */
    private void innInsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_innInsCheckBoxActionPerformed
        innerInsulation = !innerInsulation;
        if (grade1.isSelected()) {
            grade1.setSelected(false);
            plasticGradeOrdered = 0;
        }
    }//GEN-LAST:event_innInsCheckBoxActionPerformed

    /**
     * Event for the user hitting the Add To Order button.
     * Adds the order details specified to the basket using the OrderSystem.
     * @param evt The user selecting the Add To Order button.
     */
    private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderButtonActionPerformed
        // Lets process an order!
        errorDisplay.setText(" "); // Resets error message

        if (gradeButtons.getSelection() == null) {
            //Makes sure the user has selected a plastic grade
            errorDisplay.setText("Choose a plastic grade");
            return;
        }
        if (colourButtons.getSelection() == null) {
            //Makes sure the user has input a number of colours
            errorDisplay.setText("Choose a number of colours");
            return;
        }

        try { // Checks to see if the length and diameter fields are numbers.
            String toParse = lengthInput.getText();
            length = Double.parseDouble(toParse);
            toParse = diameterInput.getText();
            diameter = Double.parseDouble(toParse);
        } catch (NumberFormatException e) {
            errorDisplay.setText("Length and diameter must be numbers");
            return;
        }

        if (!metricLength) { // Converts yards to metres for length
            length = length * 1.0936133;
        }
        if (metricDiameter) { // Converts millimetres to inches for diameter
            diameter = diameter / 25.4;
        }

        if (length < 0.5 || length > 6) { // Checks length is valid
            errorDisplay.setText("Length must be between 0.5 and 6 metres (0.546 and 109.361 yards)");
            return;
        }
        if (diameter < 0.3 || diameter > 36) { // Checks diameter is valid
            errorDisplay.setText("Diameter must be between 0.3 and 36 inches (7.62 and 914.4 millimetres)");
            return;
        }

        // Finally we add the pipe to the basket!
        if (orderSystem.addToBasket(length, diameter, plasticGradeOrdered, coloursOrdered,
                innerInsulation, outerReinforcement, chemicalResistance)) {
            // If adding the pipe was successful, the basket print out and total
            // order cost are updated.
            basketOutput.setText(orderSystem.returnOrders());
            orderCost.setText(String.valueOf(orderSystem.orderCost()));
        } else {
            // Should theoretically never reach this, as invalid pipe orders should
            // should be impossible to enter.
            errorDisplay.setText("ERROR with order");
        }

    }//GEN-LAST:event_orderButtonActionPerformed

    /**
     * Event for the outer reinforcement check box being selected Sets outer
     * reinforcement true or false accordingly Resets the plastic grade chosen
     * if grade 1 or 2 is set.
     *
     * @param evt The user selects the outer reinforcement check box
     */
    private void outReCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outReCheckBoxActionPerformed
        outerReinforcement = !outerReinforcement;
        if (grade1.isSelected() || grade2.isSelected()) {
            grade1.setSelected(false);
            grade2.setSelected(false);
            plasticGradeOrdered = 0;
        }
        if (!innInsCheckBox.isEnabled()) {
            innInsCheckBox.setEnabled(true);
        }
        if (!innInsCheckBox.isSelected() && outReCheckBox.isSelected()) {
            innerInsulation = true;
            innInsCheckBox.setEnabled(false);
            innInsCheckBox.setSelected(true);
        }
        
    }//GEN-LAST:event_outReCheckBoxActionPerformed

    /**
     * Event for the chemical resistance check box being selected. Sets whether
     * chemical resistance has been ordered accordingly.
     *
     * @param evt The user selects the chemical resistance option.
     */
    private void chemResCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chemResCheckBoxActionPerformed
        chemicalResistance = !chemicalResistance;
    }//GEN-LAST:event_chemResCheckBoxActionPerformed

    /**
     * Event for the metric diameter button being selected. Changes the label to
     * millimetres, and sets the metricDiameter bool to true.
     *
     * @param evt User selects the metric diameter button.
     */
    private void diameterMetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diameterMetActionPerformed
        diameterUnitTag.setText("millimetres");
        metricDiameter = true;
    }//GEN-LAST:event_diameterMetActionPerformed

    /**
     * Event for the imperial diameter button being selected. Changes the label
     * to inches, and sets the metricDiameter bool to false.
     *
     * @param evt User selects the imperial diameter button.
     */
    private void diameterImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diameterImpActionPerformed
        diameterUnitTag.setText("inches");
        metricDiameter = false;
    }//GEN-LAST:event_diameterImpActionPerformed

    /**
     * Event for the metric length button being selected. Changes the label to
     * metres, and sets the metricLength bool to true.
     *
     * @param evt User selects the metric diameter button.
     */
    private void lengthMetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lengthMetActionPerformed
        lengthUnitTag.setText("metres");
        metricLength = true;
    }//GEN-LAST:event_lengthMetActionPerformed

    /**
     * Event for the imperial length button being selected. Changes the label to
     * yards, and sets the metricLength bool to false.
     *
     * @param evt User selects the imperial diameter button.
     */
    private void lengthImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lengthImpActionPerformed
        lengthUnitTag.setText("yards");
        metricLength = false;
    }//GEN-LAST:event_lengthImpActionPerformed

    /**
     * Event for the user pressing the finish button to end the order.
     * Checks that everything is OK with the order and prints the text files.
     * @param evt The user selects the Finish Order button.
     */
    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        if (orderSystem.returnOrders().isEmpty()) {
            // Checks that the user has actually ordered something
            errorDisplay.setText("You've not ordered anything!");
            return;
        }

        if ("".equals(nameField.getText()) || "".equals(addressField.getText())
                || "".equals(cityField.getText()) || "".equals(countyField.getText())
                || "".equals(postCodeField.getText())) {
            // Checks to make sure a name and address have been entered
            errorDisplay.setText("Please fill out name and address");
            return;
        }

        // Makes a string of the date and time to identify the order
        Date today = Calendar.getInstance().getTime();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
        String date = dateFormat.format(today);
        /*  Prints 2 files: an order and a receipt.
         Identical, except the order contains the type of the pipes as well
         Contains a title, time/date, address, and then the order and total cost. */
        try {
            PrintWriter receipt = new PrintWriter("receipt_" + date + ".txt");
            receipt.print("Pipes 'R' Us Order Receipt\r\n\r\n" + date + "\r\n\r\n");
            receipt.print(nameField.getText() + "\r\n" + addressField.getText() + "\r\n"
                    + cityField.getText() + "\r\n" + countyField.getText() + "\r\n"
                    + postCodeField.getText() + "\r\n\r\n");
            receipt.print(orderSystem.returnOrders());
            receipt.print("\r\n\r\nTotal Cost: £" + String.valueOf(orderSystem.orderCost()));
            receipt.close();
        } catch (Exception e) {
            errorDisplay.setText("Print error with receipt");
        }
        try {
            PrintWriter order = new PrintWriter("order_" + date + ".txt");
            order.print("Pipes 'R' Us Order\r\n\r\n" + date + "\r\n\r\n");
            order.print(nameField.getText() + "\r\n" + addressField.getText() + "\r\n"
                    + cityField.getText() + "\r\n" + countyField.getText() + "\r\n"
                    + postCodeField.getText() + "\r\n\r\n");
            order.print(orderSystem.returnOrdersWithType());
            order.print("\r\n\r\nTotal Cost: £" + String.valueOf(orderSystem.orderCost()));
            order.close();
        } catch (Exception e) {
            errorDisplay.setText("Print error with order");
        }

        System.exit(0); // Ends the program

    }//GEN-LAST:event_finishButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OrderForm dialog = new OrderForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressField;
    private javax.swing.JPanel addressPanel;
    private javax.swing.JTextPane basketOutput;
    private javax.swing.JScrollPane basketOutputScrollPane;
    private javax.swing.JCheckBox chemResCheckBox;
    private javax.swing.JTextField cityField;
    private javax.swing.JRadioButton colour0;
    private javax.swing.JRadioButton colour1;
    private javax.swing.JRadioButton colour2;
    private javax.swing.ButtonGroup colourButtons;
    private javax.swing.JPanel colourPanel;
    private javax.swing.JTextField countyField;
    private javax.swing.JRadioButton diameterImp;
    private javax.swing.JTextField diameterInput;
    private javax.swing.JRadioButton diameterMet;
    private javax.swing.ButtonGroup diameterMetImp;
    private javax.swing.JLabel diameterTag;
    private javax.swing.JLabel diameterUnitTag;
    private javax.swing.JLabel errorDisplay;
    private javax.swing.JButton finishButton;
    private javax.swing.JRadioButton grade1;
    private javax.swing.JRadioButton grade2;
    private javax.swing.JRadioButton grade3;
    private javax.swing.JRadioButton grade4;
    private javax.swing.JRadioButton grade5;
    private javax.swing.ButtonGroup gradeButtons;
    private javax.swing.JCheckBox innInsCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JRadioButton lengthImp;
    private javax.swing.ButtonGroup lengthImpMet;
    private javax.swing.JTextField lengthInput;
    private javax.swing.JRadioButton lengthMet;
    private javax.swing.JLabel lengthTag;
    private javax.swing.JLabel lengthUnitTag;
    private javax.swing.JPanel measurementPanel;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton orderButton;
    private javax.swing.JLabel orderCost;
    private javax.swing.JLabel orderCostLabel;
    private javax.swing.JPanel otherPropPanel;
    private javax.swing.JCheckBox outReCheckBox;
    private javax.swing.JPanel plasticGradePanel;
    private javax.swing.JTextField postCodeField;
    private javax.swing.JPanel title;
    // End of variables declaration//GEN-END:variables
}
